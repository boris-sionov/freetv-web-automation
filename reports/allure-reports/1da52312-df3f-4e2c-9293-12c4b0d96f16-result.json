{"name": "test_04_enter_otp_code[chromium]", "status": "failed", "statusDetails": {"message": "AssertionError: OTP email not received within timeout.", "trace": "self = <test_registration.TestLogin object at 0x1052d6190>\n\n    @allure.description(\"Test 04 - Fill in OTP code received from email`\")\n    def test_04_enter_otp_code(self):\n>       self.registration_page.fill_in_otp_code()\n\ntest_registration.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/registration_page.py:61: in fill_in_otp_code\n    otp_code = self.ui_actions.retrieve_otp_code()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.ui_actions.UIActions object at 0x105334f50>, timeout = 60\npoll_interval = 5\n\n    def retrieve_otp_code(self, timeout=60, poll_interval=5):\n        imap_server = \"imap.gmx.com\"\n        email_address = \"boris.freetv@gmx.com\"\n        password = \"Israel23-02\"\n    \n        start_time = time.time()\n        self.log.info(\"Connecting to GMX IMAP server...\")\n    \n        try:\n            mail = imaplib.IMAP4_SSL(imap_server)\n            mail.login(email_address, password)\n            mail.select(\"inbox\")\n            self.log.info(\"Connected to GMX email account and inbox selected.\")\n        except Exception as e:\n            self.log.error(f\"Failed to connect/login: {e}\")\n            assert False, f\"Failed to connect/login to GMX IMAP server: {e}\"\n    \n        otp_code = None\n    \n        while time.time() - start_time < timeout:\n            try:\n                status, messages = mail.search(None, \"(UNSEEN)\")\n                email_ids = messages[0].split()\n    \n                if not email_ids:\n                    self.log.info(\"No new emails yet. Retrying...\")\n                    time.sleep(poll_interval)\n                    continue\n    \n                latest_email_id = email_ids[-1]\n                status, msg_data = mail.fetch(latest_email_id, \"(RFC822)\")\n    \n                for response_part in msg_data:\n                    if isinstance(response_part, tuple):\n                        msg = email.message_from_bytes(response_part[1])\n                        email_datetime = parsedate_to_datetime(msg.get(\"Date\"))\n    \n                        if email_datetime.timestamp() < start_time:\n                            continue\n    \n                        body = \"\"\n                        if msg.is_multipart():\n                            for part in msg.walk():\n                                if part.get_content_type() == \"text/plain\":\n                                    body = part.get_payload(decode=True).decode()\n                                    break\n                        else:\n                            body = msg.get_payload(decode=True).decode()\n    \n                        otp_match = re.search(r\"קוד האימות שלך.*?([\\d]{4,8})\", body)\n                        if otp_match:\n                            otp_code = otp_match.group(1)\n                            self.log.info(f\"OTP successfully retrieved: {otp_code}\")\n    \n                            mail.store(latest_email_id, '+FLAGS', '\\\\Deleted')\n                            mail.expunge()\n                            self.log.info(\"OTP email deleted from inbox.\")\n                            break\n            except Exception as e:\n                self.log.error(f\"Error while reading email: {e}\")\n    \n            if otp_code:\n                break\n            else:\n                time.sleep(poll_interval)\n    \n        mail.logout()\n    \n        if not otp_code:\n            self.log.error(\"OTP email not received within timeout.\")\n>           assert False, \"OTP email not received within timeout.\"\nE           AssertionError: OTP email not received within timeout.\n\n../base/ui_actions.py:124: AssertionError"}, "description": "Test 04 - Fill in OTP code received from email`", "steps": [{"name": "Step 1 - Get OTP code from email", "status": "failed", "statusDetails": {"message": "AssertionError: OTP email not received within timeout.\n", "trace": "  File \"/Users/borissionov/PycharmProjects/python_playwright_automation/pages/registration_page.py\", line 61, in fill_in_otp_code\n    otp_code = self.ui_actions.retrieve_otp_code()\n  File \"/Users/borissionov/PycharmProjects/python_playwright_automation/base/ui_actions.py\", line 124, in retrieve_otp_code\n    assert False, \"OTP email not received within timeout.\"\n           ^^^^^\n"}, "start": 1745433201650, "stop": 1745433263174}], "attachments": [{"name": "log", "source": "452d7f88-bd32-4fd6-a4ef-cf1387c3bf03-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser_name", "value": "'chromium'"}], "start": 1745433201650, "stop": 1745433263175, "uuid": "758bea4f-29de-4ddb-92bb-f9a4421c4a60", "historyId": "c6191fbe16066ce1315977f5c31a87f2", "testCaseId": "1f4923d8630f0c47c51e502b722f0d2c", "fullName": "tests.test_registration.TestLogin#test_04_enter_otp_code", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup_class')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "Boriss-MBP-4"}, {"name": "thread", "value": "30272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration"}]}